<?php
/**
 * $Id$
 * MEDUCACOMPA
 *
 * El software MEDUCA COMPRA es propiedad de la UTP. MEDUCA
 * tiene los derechos de uso y personalización del mismo
 * pero no puede comercializar o ceder a ninguna persona natural o jurídica,
 * pública o privada, en ningún tiempo.
 *
 * @package diticui
 * @subpackage helpers
 * @author Ricardo Portillo
 * @copyright UTP
 */
class JqueryuiHelper extends AppHelper {
	/**
	 * Js-> Ditic: Se utiliza el enginer Ditic creado para este plugin este cuenta
	 * con una sere de funcionalidades extendidas de
	 */
	var $helpers = array('Js' => array('Diticui.Ditic'), 'Html', 'Javascript');
	private $output ='';

	/**
	 * 
	 * Premite otorgar la opción de redimensionar un Div.
	 * @param $idInput: identificador de el box para redimencionar
	 *
	 */
	function tree($idInput){
		$this->Js->get("$idInput");
		$this->Js->codebox("treeview();
		");
	}
	/**
	 * 
	 * Premite otorgar la opción de redimensionar un Div.
	 * @param $idInput: identificador de el box para redimencionar
	 * @param $option: se colocan las opciones de la funcion (se colocan identicos a jquery)
	 */
	function resizable($idInput, $option=null){
		$this->Js->get("$idInput");
		$this->Js->codebox("resizable($option);");
	}
	/**
	 * 
	 * Permite ordernar una serie de campos list.
	 * @param $idInput identificación del objeto del Dom
	 * @param $data array con la información que se colocara en los div
	 * @param $campos array con los nombres de los campos
	 * @param $modelo nombre de los modelos
	 * @param $simbolo simbolo del identificador del Dom ( por default el signo es #)
	 * @param $class nombre de la clase
	 * @param $css nombre del css asociado.
	 */

	function sortable($idInput, $data, $campos, $modelo, $simbolo='#',$class='ui-state-default', $css='ui-state-highlight'){
		$this->output='';
		$this->Js->get("$simbolo".$idInput);
		$this->Js->codebox("sortable({ placeholder: '$css', opacity: 0.6,  update: function() {
			var order = $(this).sortable(\"serialize\") + '&Ref=$idInput';
			$.post(\"".$this->webroot.$this->params["controller"]."/sortable1\", order, function(data){});  
					}});
			$(\"$simbolo".$idInput."\").disableSelection();
			$('#".$idInput."_save').click(function(){
				$.post(\"".$this->webroot.$this->params["controller"]."/sortable2\", {modelo:\"$modelo\", Ref:\"$idInput\"}, function(data){
				alert(data);
				}); 
			});
		");
		$sortable="
		<div id=\"".$idInput."_save\">click aqui para prueba si graba</div>
		<ul id=\"$idInput\">";
		foreach($data as $sort){
			$sortable.="<li id='sort_li-".$sort[$campos['modelo']]['id']."' class=\"$class\">".$sort[$campos['modelo']][$campos['title']]."</li>";
		}
		$sortable.="</ul>";
		$this->output.=$sortable;
		return $this->output;
	}
	/**
	 * 
	 * permite crear cagas portable para el sistema.
	 * @param $idInput identificación del objeto del Dom
	 */
	function portable($idInput){
		$this->Js->get(".".$idInput);
		$this->Js->codebox("sortable({
			connectWith: '.$idInput',
			cursor: 'move',
			update: function() { 
			var valor=$('.$idInput').sortable('toArray');
		}});

		$(\".portlet, .portlet_principal\").addClass('ui-widget ui-widget-content ui-helper-clearfix ui-corner-all')
			.find('.portlet-header')
				.addClass('ui-widget-header ui-corner-all')
				.prepend(\"<span class='ui-icon ui-icon-minusthick'></span>\")
				.end()
			.find('.portlet-content');

		$('.portlet-header .ui-icon').click(function() {
			$(this).toggleClass('ui-icon-minusthick').toggleClass('ui-icon-plusthick');
			$(this).parents('.portlet:first').find('.portlet-content').toggle();
		});				
		");
	}
	/**
	 * 
	 * Crea las cajas html para los portable.
	 * @param $data variable tipo array donde se guarda el titulo y el contenido de los diferentes array.
	 */
	function contentbox($data){
		$this->output='';
		$portable="";
		foreach($data as $sort){
			$portable.="<div  class=\"portlet\">
							<div class=\"portlet-header\">".$sort['title']."</div>
							<div class=\"portlet-content\">".$sort['content']."</div>
						</div>";
			$i++;
		}
		$this->output.=$portable;
		return $this->output;

	}

	/**
	 * 
	 * Acordeon de contenido, permite colocar diferentes contenido en una serie de box divididos por persinas.
	 * Para funcionar este helper es necesario user el element acorde�n adicional
	 * @param $idInput: Identificardor del div a crear o agregar funcionalidad.
	 * @param $type Nos indica del tipo de acorden estamos realizando uno d�namico
	 * uno basado en el c�digo de pnatalla. Para usar el tipo d�namico hay que agregar un n�mero  y incluir los datos a cargar en
	 * la variable data.
	 * @param $data: Se agrega por medio de array la cantidad de row que contrendra el acordeon
	 * en cada array debe haber un opci�n "title" y "content"
	 * @param $simbolo: Indica el simbolo a utilizar el identificador d entro del c�digo jquery.
	 */

	function acordeon($idInput, $options=null, $type=null, $data=null, $simbolo='#'){
		$this->output='';
		if(!$type){
			$this->Js->get($simbolo.$idInput);
			if(isset($options)){
				$options=", ".$options;
			}
			$this->Js->codebox("accordion({autoHeight: false, navigation: true $options});");
		}else{
			$javascript="";
			$acordeon="<div id=\"$idInput\"";
			foreach($data as $datos){
				$id=$datos['ident'];
				$acordeon.="<h3><a href=\"#\">".$datos['title']."</a></h3>
			<div id=\"".$id."\">
			</div>";
				$javascript.="$('#".$id."').load(\"".$datos['link']."\");\n";
			}
			$acordeon.="</div>";
			$this->Js->get($simbolo."$idInput");
			$this->Js->codebox("accordion({
									autoHeight: false,
									navigation: true
									});
									$javascript");
									$this->output.=$acordeon;
		}
		return $this->output;
	}

	/**
	 * 
	 * permite colocar la funcion a un input text de autocompletar via ajax
	 * @param $idInput: identificador de input donde realizara la busqueda
	 * @param $modelofields: se agregar el nombre del modelo y de campo a buscar separado por "/"
	 * @param $option: la opción 1 significa un autocomple sencillo  y la opci�n 2 permite obtener varios resultado
	 * @param $numResult: número de resultados de la busqueda.
	 * @param $strlen: define el minimo de caracteres para realizar la busqueda.
	 */
	function autocomplete($idInput, $modeloFields,$numResult=7,$strlen=2) {
		$datos= explode("/",$modeloFields);
		$this->Js->get("#".$idInput);
		$this->Js->codebox("attr('autocomplete','off')");
		$this->Js->codebox("autocomplete({
				minLength: $strlen,
				source: function(request, response) {
					$.post(\"".$this->webroot.$this->params["controller"]."/autocomplete\", {term:request.term, numax:$numResult, model:\"".$datos[0]."\", field:\"".$datos[1]."\"}, function(data){
																		
																			response(eval('(' + data + ')'));
																			  });
					
				}
		 });");
	}
	
	function combobox($field) {
		//Incluir la librería
		$this->Html->script('jquery-ui.combobox', array('inline' => false));
		$this->Js->get($field);
		$this->Js->codebox("combobox(); \n $( '#toggle' ).click(function() {
			$( '" . $field . "' ).toggle();
			return false;
		}); 
		");
	}
   
	/**
	 * 
	 * Otorga la funci�n a un input tipo text de aparecer una herramienta de calendario para selecionar la fecha.
	 * @param$idInput: identificador de el objeto del DOM
	 * @param$dateFormat: formato de la fecha
	 * @example 'YY-dd-mm'
	 * @param$min: fecha minima
	 * @param$max: fecha maxima
	 * @param$display: Permite cambiar a�o y mes
	 */

	function datepicker($idInput, $dateFormat=null, $min=null, $max=null, $display=0, $showOn='both'){
		$option="";
		if($dateFormat){
			$option.="dateFormat:'$dateFormat', ";
		}
		if($min){
			$option.="minDate:'$min', ";
		}
		if($max){
			$option.="maxDate: '$max',";
		}
		if($display==1){
			$option.="changeMonth: true,
				changeYear: true,";

		}
		$this->Js->get($idInput);
		$this->Js->codebox("datepicker( {
		$option
		showOn:'$showOn', 
		buttonImage: '".$this->webroot."img/calendar_icon.png', 
		buttonImageOnly: true
		});");
	}
	/**
	 * 
	 * Otorga la funci�n a un input tipo text de aparecer una herramienta de calendario para selecionar la fecha.
	 * @param $idInput: identificador de el objeto del DOM
	 * @param $showTime: premite ver el tiempo a 12 horas o a 24 por default esta en false (vista de 12 horas)
	 * @param $step: Etapa de tiempo, el vaor por default es 15
	 * @param $start: Hora Inicial
	 * @param $end Hora Final
	 */
	function timepicker($idInput, $showTime=false, $step=15, $start=null, $end=null){
		$option="";
		if($start){
			$option.="startTime: new Date(0, 0, 0, $start, 0),"; // Using string. Can take string or Date object.
		}
		if($end){
			$option.="endTime: new Date(0, 0, 0, $end, 0),"; // Using Date object here.
		}
		$this->Js->get("#$idInput");
		$this->Js->codebox("timePicker( {
		$option
				show24Hours: $showTime,
				step: $step,
				url: ".$this->webroot."
				});");
	}



	/**
	 * 
	 * Cajas de contenido divididas por pesta�as puede usar tabs dinamicos y tabs sencillo
	 * @param $idInput: identificador de el objeto del DOM
	 * @param $type: identifica que tipo por default es crear tab basados en datos colocadso en el dom. La segunda opci�n es dinamica.
	 * @param $data: Los datos para introducir en las tablas dinamicas. Por medio de un array
	 * que contiene el "link"  Para identificar de donde viene los datos, "title" titulo
	 * en la pestaña y "Content" el contenidp a mostrar en este caso dinamico esta vacio.
	 * @param $option: opciones para la las pesta�as.
	 */
	function tabs($idInput, $type=null, $data=null, $option=null){
		$this->output='';
		if(!$type){
			$this->Js->get("#$idInput");
			$this->Js->codebox("tabs($option)");
		}else{
			$this->Js->get("#$idInput");
			$this->Js->codebox("tabs({ ajaxOptions:{
					error: function(xhr, status, index, anchor) {
						$(anchor.hash).html(\"Contenido temporalmente no publicado\");
					}
					}});");
			$tabs="	<div id=\"$idInput\">
			<ul>";
			$i=1;
			$contenido="";
			foreach ($data as $datos){
				$tabs.="<li><a href=\"".$datos['link']."\">".$datos['title']."</a></li>";
				if($datos['content']){
					$contenido.="<div id=\"".$datos['link']."\">".$datos['content']."</div>";
				}
				$i++;
			}
			$tabs.="</ul>$contenido</div>";
			$this->output.=$tabs;
		}
		return $this->output;

	}



	/**
	 * 
	 * Permite otorgar la funci�n a cualquier objeto de hacer aparecer o ocultar un objeto.
	 * @param $idInput identificador del Dom
	 * @param $effect efecto asociado.
	 * @param $time duración del efecto
	 * @param $eacho metodo de funcionamiento cuando el número es diferente de 0 se utiliza el valor $idInput
	 */

	function shclick($idInput='', $effect, $time=500, $eacho=0){
		if($eacho==0){
			$this->Js->get("#$idInput");
		}
		$this->Js->codebox("toggle('".$effect."',options, $time);");
	}


	/**
	 * SHCSSCLICK
	 *  Permite agregar y quitar a la vez una clase CSS a un objeto luego de hacer click sobre otro.
	 *  @param $idInput identificador del Dom
	 * @param $effect efecto asociado.
	 * @param $time duración del efecto
	 * @param $eacho metodo de funcionamiento cuando el número es diferente de 0 se utiliza el valor $idInput
	 */

	function shcssclick($idInput='', $css, $time=500, $eacho=0){
		if($eacho==0){
			$this->Js->get("#$idInput");
		}
		$this->Js->codebox("toggleClass('$css', $time);");
	}


}
?>